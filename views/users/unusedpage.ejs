const updateCart = async (req, res) => {
    try {
        const { productId, direction } = req.body;
        const userId = req.session.user_id;

        let userCart = await cart.findOne({ userId: userId }).populate('product.productId');

        if (!userCart) {
            return res.status(404).json({ error: 'User does not have a cart' });
        }

        const productIndex = userCart.product.findIndex(item => item.productId._id.toString() === productId);
        if (productIndex !== -1) {
            const product = userCart.product[productIndex].productId;

            if (direction === 'up') {
                if (userCart.product[productIndex].quantity < product.countStock) {
                    userCart.product[productIndex].quantity++;
                } else {
                    return res.json({ error: 'Item is out of stock' });
                }
            } else if (direction === 'down' && userCart.product[productIndex].quantity > 1) {
                userCart.product[productIndex].quantity--;
            }

            userCart.totalPrice = userCart.product.reduce((total, item) => {
                return total + (item.quantity * item.productId.productPrice);
            }, 0);

            await userCart.save();

            res.json({
                quantity: userCart.product[productIndex].quantity,
                totalPrice: userCart.totalPrice,
            });
        } else {
            return res.status(404).json({ error: 'Item not found in the cart' });
        }
    } catch (error) {
        console.error('updateCart - Error:', error.message);
        res.status(500).json({ error: 'Internal server error' });
    }
};
