<%- include('../layouts/adminHeader.ejs') -%>

        <style>
           .image-item {
    display: inline-block;
    margin-right: 10px;
    margin-bottom: 10px; /* Added spacing for better alignment */
}

.image-preview {
    width: 120px; /* Increased width */
    height: 120px;
    object-fit: cover;
    border: 1px solid #ddd;
    border-radius: 5px; /* Added rounded corners */
}
#imageInput{
    width:fit-content;

}

.delete-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 5px;
    cursor: pointer;
    font-size: 10px;
    border-radius: 50%; /* Circular button */
}
    </style>



        <body>
            <form id="productForm" action="/admin/insertProduct" method="post" enctype="multipart/form-data" 
            novalidate onsubmit="return validateForm()" >
                <section class="content-main">
                    <div class="row">
                        <div class="col-9">
                            <div class="content-header">
                                <h2 class="content-title">Add New Product</h2>
                                <div>
                                    <!-- <button type="button" class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button> -->
                                    <!-- <button type="submit" class="btn btn-md rounded font-sm hover-up" >ADD IT</button> -->
                                    
                                <label class="form-check mb-4">
                                    <button class="btn btn-md rounded font-sm hover-up" style="background-color: #300fc4;margin-left: 10cm;" 
                                    type="submit" >ADD IT</button>
                                </label>
                                
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>General Info</h4>
                                </div>
                                <div class="card-body">
                                    <div class="mb-4">
                                        <label class="form-label">Product Name</label>
                                        <input type="text" name="productName" id="productName" placeholder="Type here" class="form-control" >
                                        <div id="pname_error" class="text-danger"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label">Description</label>
                                        <textarea name="productDescription" id="productDescription" placeholder="Type here" class="form-control" rows="4" ></textarea>
                                        <div id="pdescription_error" class="text-danger"></div>
                                    </div>
                                    <div class="row">
                                        <div class="col-lg-4">
                                            <div class="mb-4">
                                                <label class="form-label">Price </label>
                                                <input type="text" name="productPrice" id="productPrice" placeholder="Rs." pattern="^[1-9][0-9]*(.[0-9]+)?$" class="form-control" >
                                                <div id="mrp_error" class="text-danger"></div>
                                            </div>
                                        </div>
                                        
                                        <div class="col-lg-4">
                                            <label class="form-label">Brands</label>
                                            <select class="form-select" name="productBrand" id="productBrand" >
                                                <option value="">Select Brand</option>
                                                <option value="kookabura">KOOKABURA</option>
                                                <option value="mrf">MRF</option>
                                                <option value="sg">SG</option>
                                                <option value="">SPARTAN</option>
                                                <option value="dsc">DSC</option>
                                                <option value="gm">GM</option>
                                                <option value="shrey">SHREY</option>
                                                <OPTION value="prokick">PROKICK</OPTION>
                                                <option value="ss">SS</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>                          
                        </div>


                        <div class="col-lg-3">
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Media</h4>
                                </div>
                                <div class="card-body"  style="align-items: center;">

                                    <div class="input-upload">
                                        <img src="/adminAssets/imgs/theme/upload.svg" alt="">
                                        <div id="image-preview-container"></div>
                                        <div id="file-error" class="text-danger"></div>
                                        <!-- <div id="imagePreview" class="d-flex flex-wrap"> -->
                                            <!-- Image previews will be appended here -->
                                            
                                       
                                        <input class="form-control" type="file"
                                         multiple accept="image/jpeg,image/jpg,image/png,image/webp,image/gif" name="images"
                                          id="imageInput" onchange="validateAndPreviewImages(event)" required>
                                        
                                    </div>
                                    
                                    </div>
                                </div>
                            </div>

                            <!-- <div id="cropperModal" class="modal" style="display: none;">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Crop Image</h5>
                                        <button type="button" id="closeModal">&times;</button>
                                    </div>
                                    <div class="modal-body">
                                        <img id="cropImage" style="max-width: 100%; display: block;">
                                    </div>
                                    <div class="modal-footer">
                                        <button id="cropAndSave" class="btn btn-primary">Crop & Save</button>
                                    </div>
                                </div>
                            </div> -->

                            <!-- <div id="cropperModal" class="modal" style="display: none;"> -->
                                <div id="cropperModal" class="modal" style="display: none;">
                                    <div class="modal-content" style="max-height: 80vh; overflow-y: auto; width: 90%;">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Manage Images</h5>
                                            <button type="button" id="closeModal">&times;</button>
                                        </div>
                                        <div class="modal-body d-flex flex-wrap" id="cropImagesContainer">
                                            <!-- Multiple cropping areas will be appended here -->
                                            
                                        </div>
                                        <div class="modal-footer">
                                            <button id="cropAndSave" class="btn btn-primary">Crop & Save All</button>
                                        </div>
                                    </div>
                                </div>
                             </div>

                             <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Organization</h4>
                                </div>
                                <div class="card-body">
                                    <div class="row gx-2">


                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select"  id="productCategory"  name="productCategory" required>
                                                <option value="">Select Category</option>
                                                <% for(let i = 0; i < categories.length; i++) { %>

                                                    <option value="<%= categories[i]._id %>"><%= categories[i].catName %></option>
                                                <% } %>
                                            </select>
                                            <div id="pcategory_error" style="color: red;"></div>
                                        </div>
                                        




                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Count Stock</label>
                                            <input type="number" id="countStock" name="countStock" placeholder="0" 
                                            pattern="^[1-9][0-9]*(.[0-9]+)?$" class="form-control" required min="1">

                                        </div>
                                        <div id="stock_error" class="text-danger"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </form>
            
            <%- include('../layouts/adminFooter.ejs') -%>
        </main>
            

        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js"></script>

        <% if (typeof message !== 'undefined') { %>
            <script>
              toastr.error('<%= message %>');
            </script>
            <% } %>
        

<script>

    
    // document.getElementById('productForm').addEventListener('submit', function (event) {
    // event.preventDefault();
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('productForm');
    const imageInput = document.getElementById('imageInput');
    const cropAndSave = document.getElementById('cropAndSave');
    const modal = document.getElementById('cropperModal');

    if (form) {
        form.addEventListener('submit', async function (event) {
            event.preventDefault();

            if (!validateForm()) return; // Stop if validation fails

            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to add this product?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, add it!',
            }).then(async (result) => {
                if (result.isConfirmed) {
                    console.log("Submitting product with cropped images...");
                    
                    // If cropping modal is open, process images first
                    if (modal.style.display === 'block') {
                        await processCroppedImagesAndSubmit();
                    } else {
                        form.submit(); // Submit normally if no cropping is needed
                    }
                }
            });
        });
    } else {
        console.error('Form with ID "productForm" not found!');
    }

    async function processCroppedImagesAndSubmit() {
        const croppedFiles = [];

        try {
            await Promise.all(
                croppers.map((cropper, index) =>
                    new Promise((resolve, reject) => {
                        const canvas = cropper.getCroppedCanvas();
                        if (!canvas) {
                            console.error(`Cropper ${index} failed to generate canvas.`);
                            return reject(new Error(`Cropper ${index} failed`));
                        }
                        canvas.toBlob((blob) => {
                            if (blob) {
                                croppedFiles.push(blob);
                                resolve();
                            } else {
                                console.error(`Canvas ${index} failed to convert to blob.`);
                                reject(new Error(`Canvas ${index} failed`));
                            }
                        }, 'image/jpeg');
                    })
                )
            );

            console.log("Cropped files generated:", croppedFiles);

            // Prepare FormData
            const formData = new FormData();
            croppedFiles.forEach((blob, index) => {
                const file = new File([blob], `cropped_image_${index + 1}.jpg`, { type: 'image/jpeg' });
                formData.append('images', file);
            });

            // Add product details
            formData.append('productName', document.getElementById('productName').value);
            formData.append('productDescription', document.getElementById('productDescription').value);
            formData.append('productPrice', document.getElementById('productPrice').value);
            formData.append('countStock', document.getElementById('countStock').value);
            formData.append('productCategory', document.getElementById('productCategory').value);

            const listedCheckbox = document.getElementById('listed');
            if (listedCheckbox) {
                formData.append('listed', listedCheckbox.checked);
            }

            // Send data to backend
            const response = await fetch('/admin/insertProduct', {
                method: 'POST',
                body: formData,
                headers: { Accept: 'application/json' },
            });

            if (!response.ok) {
                throw new Error('Failed to upload product');
            }

            console.log('Product uploaded successfully');
            form.reset();
            window.location.href = '/admin/addProduct';

        } catch (error) {
            console.error('Error during crop and save:', error);
        } finally {
            modal.style.display = 'none';
            croppers = [];
            cropImagesContainer.innerHTML = '';
        }
    }
});

function validateForm() {
    let pname = document.getElementById("productName").value;
    let pdescription = document.getElementById("productDescription").value;
    let pcategory = document.getElementById('productCategory').value;
    let price = document.getElementById("productPrice").value;
    let stock = document.getElementById("countStock").value;
    let fileInput = document.getElementById("imageInput");
    let files = fileInput.files;

    let pnamePattern = /^[a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*$/;
    let pricePattern = /^\d+(\.\d{1,2})?$/;
    let stockPattern = /^[1-9]\d*$/;

    function setError(id, message) {
        let element = document.getElementById(id);
        if (element) element.innerHTML = message; // Check before setting
    }

    function clearError(id) {
        let element = document.getElementById(id);
        if (element) element.innerHTML = "";
    }

    if (!pnamePattern.test(pname)) {
        setError("pname_error", "Product name must contain only letters and numbers.");
        return false;
    } else {
        clearError("pname_error");
    }

    if (pdescription.trim() === "") {
        setError("pdescription_error", "Description cannot be empty.");
        return false;
    } else {
        clearError("pdescription_error");
    }

    if (!pricePattern.test(price) || parseFloat(price) <= 99) {
        setError("mrp_error", "Price must be greater than 100.");
        return false;
    } else {
        clearError("mrp_error");
    }

    if (!stockPattern.test(stock)) {
        setError("stock_error", "Stock count must be a positive integer.");
        return false;
    } else {
        clearError("stock_error");
    }

    if (!pcategory) {
        setError("pcategory_error", "Please select a category.");
        return false;
    } else {
        clearError("pcategory_error");
    }

    if (!files || files.length === 0) {
        setError("file_error", "Please upload at least one file.");
        return false;
    }

    let allowedFileTypes = ["image/jpeg", "image/png", "image/jpg"];
    for (let i = 0; i < files.length; i++) {
        if (!allowedFileTypes.includes(files[i].type)) {
            setError("file_error", "Only JPEG, JPG, and PNG files are allowed.");
            return false;
        }
    }

    clearError("file_error");
    return true;
}
</script>

            <!-- <script>
                function previewImages() {
            const imagePreview = document.getElementById('imagePreview');
            const files = document.getElementById('imageInput').files;

            imagePreview.innerHTML = ''; // Clear existing previews

            if (files.length > 0) {
                for (const file of files) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        imagePreview.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                }
            } else {
                const placeholder = document.createElement('div');
                placeholder.classList.add('placeholder-img');
                placeholder.innerHTML = '<img src="admin-assets/imgs/theme/upload.svg" alt="Upload">';
                imagePreview.appendChild(placeholder);
            }
        }
            </script> -->
            <script>

let croppers = [];
let imagesToCrop = [];
const modal = document.getElementById('cropperModal');
const cropImagesContainer = document.getElementById('cropImagesContainer');
const closeModal = document.getElementById('closeModal');
const cropAndSave = document.getElementById('cropAndSave');
const imageInput = document.getElementById('imageInput');
const imageError = document.getElementById('file-error');

// Validate and Load Images for Cropping
function validateAndPreviewImages(event) {
    const files = event.target.files;

     if (!imageError || !cropImagesContainer || !modal) {
        console.error('Required DOM elements not found!');
        return;
    }

    // Reset errors, cropper instances, and UI
    imageError.textContent = '';
    cropImagesContainer.innerHTML = '';
    croppers = [];
    imagesToCrop = [];

    if (files.length === 0 || files.length > 4) {
        imageError.textContent = 'Please upload between 1 and 4 images.';
        event.target.value = '';
        return;
    }

    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];

    for (const file of files) {
        if (!allowedTypes.includes(file.type)) {
            imageError.textContent = 'Invalid file type. Please upload a JPEG, PNG, WEBP, or GIF image.';
            event.target.value = '';
            return;
        }
        imagesToCrop.push(file);
    }

    openCropModal();
}

function openCropModal() {
    cropImagesContainer.innerHTML = ''; // Clear previous previews

    imagesToCrop.forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            const imageWrapper = document.createElement('div');
            imageWrapper.classList.add('cropper-wrapper');
            imageWrapper.style.margin = '10px';
            imageWrapper.style.position = 'relative';

            const img = document.createElement('img');
            img.src = e.target.result;
            img.style.maxWidth = '200px';
            img.style.maxHeight = '200px';

            const deleteButton = document.createElement('button');
            deleteButton.innerText = 'Delete';
            deleteButton.style.position = 'absolute';
            deleteButton.style.top = '5px';
            deleteButton.style.right = '5px';
            deleteButton.style.backgroundColor = '#ff4d4d';
            deleteButton.style.color = '#fff';
            deleteButton.style.border = 'none';
            deleteButton.style.padding = '5px 10px';
            deleteButton.style.cursor = 'pointer';
            deleteButton.style.borderRadius = '5px';

            // Generate a unique name for each image
            const imageName = file.name || `image_${Date.now()}_${index}`;

            deleteButton.addEventListener('click', () => {
                deleteImage(index, imageWrapper, imageName);
            });

            imageWrapper.appendChild(img);
            imageWrapper.appendChild(deleteButton);
            cropImagesContainer.appendChild(imageWrapper);

            // Initialize Cropper.js for each image
            const cropper = new Cropper(img, {});
            croppers.push(cropper);
        };
        reader.readAsDataURL(file);
    });

    modal.style.display = 'block';
}


function deleteImage(index, imageWrapper, imageName) {
    // Remove the image from the array
    imagesToCrop.splice(index, 1); // Remove the image file
    croppers.splice(index, 1); // Remove the corresponding cropper instance
    imageWrapper.remove(); // Remove from DOM

    // Send request to backend to delete the image
    fetch('/admin/deleteImage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageName: imageName })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Image deleted from backend:', data);
    })
    .catch(error => {
        console.error('Error deleting image from backend:', error);
    });

    // Rebuild cropper list to avoid index mismatch
    croppers = croppers.filter((_, i) => i !== index);
    imagesToCrop = imagesToCrop.filter((_, i) => i !== index);
    const dataTransfer = new DataTransfer(); // Create a new DataTransfer object
    imagesToCrop.forEach((file) => {
        dataTransfer.items.add(file); // Add the remaining files to DataTransfer
    });
    imageInput.files=dataTransfer.files

    console.log('Updated input files:', imageInput.files);

}


cropAndSave.addEventListener('click', async () => {
    const croppedFiles = [];
    try {
        const remainingCroppers = croppers.filter((cropper, index) => imagesToCrop[index] !== null);
        
        // Crop the images and prepare the cropped files
        await Promise.all(
            croppers.map((cropper, index) =>
                new Promise((resolve, reject) => {
                    const canvas = cropper.getCroppedCanvas();
                    if (!canvas) {
                        console.error(`Cropper ${index} failed to generate canvas.`);
                        return reject(new Error(`Cropper ${index} failed`));
                    }
                    canvas.toBlob((blob) => {
                        if (blob) {
                            croppedFiles.push(blob); // Only add the cropped file to the array
                            resolve();
                        } else {
                            console.error(`Canvas ${index} failed to convert to blob.`);
                            reject(new Error(`Canvas ${index} failed`));
                        }
                    }, 'image/jpeg');
                })
            )
        );

        console.log("Cropped files generated:", croppedFiles);

        // Save cropped images to a global variable or state
        window.croppedImages = croppedFiles;

        // Close the modal after saving cropped images
        modal.style.display = 'none'; 
        croppers = [];
        cropImagesContainer.innerHTML = '';

    } catch (error) {
        console.error('Error during crop and save:', error);
    }
});


      
//Close modal on clicking "X"
closeModal.addEventListener('click', () => {
    modal.style.display = 'none';
    croppers = [];
    cropImagesContainer.innerHTML = '';
});

            </script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

            
            <script src="/admin-assets/js/vendors/jquery-3.6.0.min.js"></script>
            <script src="/admin-assets/js/vendors/bootstrap.bundle.min.js"></script>
            <script src="/admin-assets/js/vendors/select2.min.js"></script>
            <script src="/admin-assets/js/vendors/perfect-scrollbar.js"></script>
            <script src="/admin-assets/js/vendors/jquery.fullscreen.min.js"></script>
            <script src="/admin-assets/js/main.js" type="text/javascript"></script>
        </body>
        </html>
        

